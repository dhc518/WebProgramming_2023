JDBC
자바에서 DBMS의 종류와 관계 없이 데이터베이스를 조작하기 위한 API를 의미합니다.

드라이버 연동
1. mysql-connector-java-8.jar를 src/main/webapp/WEB-INF/lib 폴더에 복사시킨다.

2. 데이터베이스 생성 CREATE DARAVASE odbo;

3.연동
<%@ page import="java.sql.*"%> //sql관연 모든 클래스 임포트
</head>
<body>
	<%
		// 1. 변수 4개 선언
		String driverName="com.mysql.jdbc.Driver";
		String url="jdbc:mysql://localhost:3306/odbo";
		String username="root";
		String password="123456";
		Connection conn = null;
		try{
			// 2. 드라이버 로딩
			Class.forName(driverName);
			// 3. 연동
			conn = DriverManager.getConnection(url, username, password);
			// 4. 사용
			out.println(">>연결 성공 : " + conn);
		}catch(ClassNotFoundException e){
			out.println(">>연결 실패 : 드라이버 복사 필요!");
		}catch(SQLException e){
			out.println(">>연결 실패 : SQL 명령문 확인 필요!");
		}finally{
			// 5. 닫기
			try{
				if(conn != null)
					conn.close();
			} catch(SQLException e){
				;
			}
		}
		
	
	%>

</body>
</html>


JDBC 프로그래밍

1. 테이블 생성

1-1 sql 파일 생성하기
.sql 파일에 
USE 테이터 베이스명
CREATE TABLE IF NOT EXISTS 테이블명(
	id VARCHAR(20) PRIMARY KEY,
	passwd VARCHAR(20),ㄴ
	email VARCHAR(50),
	signuptime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

1-2 sql 파일경로 확인

1-3
mysql 콘솔창에
mysql> source 파일경로
라고 입력하면 테이블이 생성된다.

2. 회원가입 프로그램
2-1 회원가입 폼 양식 생성(signup.jsp)
2-2 회원저보 테이블에 저장
signup.jsp 파일에서 넘겨받은 정보를 getParameter로 얻어와서 String으로 저장시킨다.
	String sql = "INSERT INTO members(id, passwd, email) VALUES";
	sql += "('" + u_id + "','" + u_pw + "','" + u_mail +"')";
SQL 쿼리문을 보내기 위한 객체 sm을 생성
Statement sm = conn.createStatement();

3. 회원정보 출력
Statement 객체의 executeQuery() 메소드를 선언하여 수행할 SQL 명령문을 ResultSet 유형의 변수 rs에 저장합니다.
ResultSet rs = sm.executeQuery("SELECT id, email, signuptime FROM members");
리스트 형태로 출력
while(rs.next()){
	str += count + " : " + rs.getString("id") + " / " + rs.getString("email")
		+ " / " + rs.getString("signuptime") + "<br>";
		count ++;		
}

4. 회원탈퇴   프로그램
4-1.회원 탈퇴 폼 양식 생성하기(withdraw.jsp)
4-2.회원정보 테이블에서 삭제하기
회원 탈퇴 폼 화면에서 입력한 아이디에 대한 정보를 가져와 u_id 변수에 저장합니다.
	String u_id = request.getParameter("userID");
HTTP로 전달받은 아이디에 대한 정보를 members 테이블에서 삭제하기 위한 DELETE 명령문을 sql변수에 저장합니다. 회원 탈퇴 폼 화면에서 전달되는 파라미터를 이용하기 위해 '?'를 정의합니다.
	String sql = "DELETE FROM members WHERE id = ?";
SQL 명렴움을 수행하기 위해 executeUpdate() 메소드를 호출하여 count 변수에 저장합니다.
	int count = sm.executeUpdate();


	